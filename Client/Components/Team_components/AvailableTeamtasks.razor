@inject HttpClient Http
@using vagtplanen.Shared.Models

<div class="modal fade show modal-lg" id="myModal" style="display:block;" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Alle vagter ud fra valgt opgave</h3>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                @if (tasks == null)
                {
                    <p>Loading...</p>
                }
            else
                {
            <EditForm Model="@tea">
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @ref="grid" Data="@tasks.Where(x => x.locked == false && x.taken == false)" TItem="TeamTask">
                    <Columns>
                        <RadzenDataGridColumn TItem="TeamTask" Property="description" Title="Beskrivelse" />
                        <RadzenDataGridColumn TItem="TeamTask" Property="start_time" Title="Start tidspunkt" />
                        <RadzenDataGridColumn TItem="TeamTask" Property="end_time" Title="Slut tidspunkt" />
                        <RadzenDataGridColumn TItem="TeamTask" Property="people_needed" Title="Personer" />
                        <RadzenDataGridColumn TItem="TeamTask" Property="locked" Title="Tag opgave">
                            <Template Context="task">
                                <RadzenButton Icon="check_circle" Click=@(args => OnTake(task)) />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </EditForm>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@ModalOk">OK</button>
            </div>
        </div>
    </div>
</div>

@code {
    public List<TeamTask> tasks = new();
    public RadzenDataGrid<TeamTask> grid;
    public TeamTask takenTask = new();
    public TaskClass task = new();

    protected async override Task OnInitializedAsync()
    {
        tasks = await Http.GetFromJsonAsync<List<TeamTask>>("api/teamtask");
    }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter] public Team tea { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }

    async void OnTake(TeamTask task)
    {
        task.taken = true;
        takenTask = task;
        takenTask.team = tea;
        await Http.PostAsJsonAsync($"api/method/assignteamtask", takenTask);
        await grid.Reload();
    }
}
