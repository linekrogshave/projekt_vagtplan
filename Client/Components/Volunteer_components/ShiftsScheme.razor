@inject HttpClient Http

<div class="modal fade show modal-lg" id="myModal" style="display:block;" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Se hvem du skal på vagt med</h3>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                @if (shifts == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <EditForm Model="@vol">
                        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data="@(shifts.Where(x => x.taken == false))" TItem="Shift">
                            <Columns>
                                <RadzenDataGridColumn TItem="Shift" Property="shift_id" Title="ID" Width="70px" />
                                <RadzenDataGridColumn TItem="Shift" Property="start_time" Title="Start tidspunkt" />
                                <RadzenDataGridColumn TItem="Shift" Property="end_time" Title="Slut tidspunkt" />
                            </Columns>
                        </RadzenDataGrid>
                    </EditForm>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@ModalOk">OK</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Volunteer vol { get; set; }

    public Shift[] shifts;

    protected async override Task OnInitializedAsync()
    {
        shifts = await Http.GetFromJsonAsync<Shift[]>("api/shift");
    }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
}
